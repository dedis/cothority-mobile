import React from 'react';
import Tappable from 'react-tappable'

import './pop-organizer.css'

export default class PopOrganizer extends React.Component {

    constructor(props) {
        super(props)

        this.state = {
            phase:  0
        }
    }

    updatePhase(index) {
        this.setState({phase: index});
    }

    //TODO: send message to the given address (verify this is right) ... need to create a WebSocket?
    contactConode() {
        // Move to next phase
        this.updatePhase(1);
    }

    //TODO: send PIN message with public key and PIN to the conode
    completePairing() {
        // Move to next phase
        this.updatePhase(2);
    }

    //TODO: send StoreConfig message to the server
    storeConfig() {
        // Move to next phase
        this.updatePhase(3);
    }

    //TODO: generate key pair and save it.
    generateKeyPair() {

    }

    //TODO: start clicable only after inserting address + check address?!?
    renderStartPairing() {
        return (
            <div>
                <h2>Setup Pop Party 1/3</h2>
                <p>
                    Insert the address of a conode and press "Start" in order to
                    begin setting up a PoP party.
                </p>
                <label>
                    Conode Address:
                    <br/>
                    <input type="text"/>
                </label>
                <Tappable className="start_button" onTap={() => this.contactConode()}>
                    Start
                </Tappable>
            </div>
        )
    }

    //TODO: input only digits, done clicable only after generating keys and inserting PIN
    renderCompletePair() {
        return (
            <div>
                <h2>Setup Pop Party 2/3</h2>
                <p>
                    Generate a pair of keys (public/private) and insert the PIN generated by the conode
                    in order to accomplish the pairing phase.
                </p>
                <label>
                    PIN:
                    <br/>
                    <input type="text"/>
                </label>
                <Tappable className="keys_button" onTap={() => this.generateKeyPair()}>
                    Generate Keys
                </Tappable>
                <Tappable className="done_button" onTap={() => this.completePairing()}>
                    Done
                </Tappable>
            </div>
        )
    }

    //TODO: check input, done clicable only if required information have been provided
    renderStoreConfig() {
        return (
            <div>
                <h2>Setup Pop Party 3/3</h2>
                <p>
                    Insert details about the PoP party.
                </p>

                <table>
                    <tr>
                        <th>Name:</th>
                        <td>
                            <input type="text"/>
                        </td>
                    </tr>
                    <tr>
                        <th>Location:</th>
                        <td>
                            <input type="text"/>
                        </td>
                    </tr>
                    <tr>
                        <th>Date:</th>
                        <td>
                            <input type="text"/>
                        </td>
                    </tr>
                    <tr>
                        <th>Description:</th>
                        <td>
                            <input type="text"/>
                        </td>
                    </tr>
                    <tr>
                        <th>Other orgnaizers:</th>
                        <td>
                            <input type="text"/>
                        </td>
                    </tr>
                </table>

                <Tappable className="done_button" onTap={() => this.storeConfig()}>
                    Done
                </Tappable>
            </div>
        )
    }

    //TODO: show recap of PoP party details
    renderSetupComplete() {
        return (
            <h2>Setup Completed!</h2>
        )
    }

    render() {
        let content = null;
        switch(this.state.phase) {
            case 0:
                content = this.renderStartPairing();
                break;
            case 1:
                content = this.renderCompletePair();
                break;
            case 2:
                content = this.renderStoreConfig();
                break;
            case 3:
                content = this.renderSetupComplete();
                break;
            default:
                content = this.renderStartPairing();
                break;
        }

        return content;
    }
}